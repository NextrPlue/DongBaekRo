package com.redstonetorch.dongbaekro.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.compose.ui.zIndex
import com.kakao.vectormap.KakaoMap
import com.kakao.vectormap.KakaoMapReadyCallback
import com.kakao.vectormap.LatLng
import com.kakao.vectormap.MapLifeCycleCallback
import com.kakao.vectormap.MapView
import com.kakao.vectormap.camera.CameraUpdateFactory
import com.kakao.vectormap.label.LabelOptions
import com.redstonetorch.dongbaekro.R
import com.redstonetorch.dongbaekro.ui.dto.KakaoPlace

@Composable
fun RouteTypeSelectionScreen(
    currentLat: Double,
    currentLng: Double,
    destination: KakaoPlace,
    onRouteTypeSelected: (String) -> Unit,
    onBackClick: () -> Unit
) {
    val context = LocalContext.current
    val kakaoMap = remember { mutableStateOf<KakaoMap?>(null) }

    Box(modifier = Modifier.fillMaxSize()) {
        // Ïπ¥Ïπ¥Ïò§Îßµ Î∞∞Í≤Ω
        AndroidView(
            factory = { ctx ->
                MapView(ctx).apply {
                    start(
                        object : MapLifeCycleCallback() {
                            override fun onMapDestroy() {}
                            override fun onMapError(e: Exception?) {}
                        },
                        object : KakaoMapReadyCallback() {
                            override fun onMapReady(map: KakaoMap) {
                                kakaoMap.value = map
                                setupRouteSelectionMap(map, currentLat, currentLng, destination)
                            }
                        }
                    )
                }
            },
            modifier = Modifier.fillMaxSize()
        )

        // ÏÉÅÎã® Ìó§Îçî
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
                .zIndex(2f),
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(
                onClick = onBackClick,
                modifier = Modifier
                    .background(Color.White, RoundedCornerShape(8.dp))
                    .size(48.dp)
            ) {
                Icon(
                    painter = painterResource(id = R.drawable.baseline_navigate_before_24),
                    contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                    tint = Color(0xFF6B7280)
                )
            }
            
            Spacer(modifier = Modifier.width(12.dp))
            
            Card(
                modifier = Modifier.weight(1f),
                colors = CardDefaults.cardColors(containerColor = Color.White),
                shape = RoundedCornerShape(12.dp)
            ) {
                Column(
                    modifier = Modifier.padding(12.dp)
                ) {
                    Text(
                        text = "Î™©Ï†ÅÏßÄ",
                        fontSize = 12.sp,
                        color = Color(0xFF6B7280)
                    )
                    Text(
                        text = destination.place_name,
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF374151)
                    )
                    Text(
                        text = destination.road_address_name.ifEmpty { destination.address_name },
                        fontSize = 12.sp,
                        color = Color(0xFF9CA3AF),
                        maxLines = 1
                    )
                }
            }
        }

        // ÌïòÎã® Í≤ΩÎ°ú Ïú†Ìòï ÏÑ†ÌÉù Ïπ¥Îìú
        RouteTypeSelectionBottomCard(
            onRouteTypeSelected = onRouteTypeSelected,
            modifier = Modifier.align(Alignment.BottomCenter)
        )
    }
}

@Composable
fun RouteTypeSelectionBottomCard(
    onRouteTypeSelected: (String) -> Unit,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier
            .fillMaxWidth()
            .padding(16.dp),
        shape = RoundedCornerShape(topStart = 20.dp, topEnd = 20.dp),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(20.dp)
        ) {
            // Ìï∏Îì§ Î∞î
            Box(
                modifier = Modifier
                    .width(44.dp)
                    .height(4.dp)
                    .background(Color(0xFFDEDEDE), RoundedCornerShape(2.dp))
                    .align(Alignment.CenterHorizontally)
            )

            Spacer(modifier = Modifier.height(20.dp))

            Text(
                text = "ÏïàÏã¨ Í≤ΩÎ°ú Ïú†ÌòïÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1F2937),
                textAlign = TextAlign.Center,
                modifier = Modifier.fillMaxWidth()
            )

            Text(
                text = "ÏÑ†ÌÉùÌïú ÏïàÏ†ÑÏãúÏÑ§Î¨ºÏùÑ Ïö∞ÏÑ†Ï†ÅÏúºÎ°ú Í≤ΩÏú†ÌïòÎäî Í≤ΩÎ°úÎ•º ÏïàÎÇ¥Ìï©ÎãàÎã§",
                fontSize = 14.sp,
                color = Color(0xFF6B7280),
                textAlign = TextAlign.Center,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 8.dp)
            )

            Spacer(modifier = Modifier.height(24.dp))

            // Í≤ΩÎ°ú Ïú†Ìòï ÏÑ†ÌÉù Î≤ÑÌäºÎì§
            RouteTypeButton(
                icon = "üìπ",
                title = "CCTV Ïö∞ÏÑ† Í≤ΩÎ°ú",
                description = "CCTVÍ∞Ä ÎßéÏù¥ ÏÑ§ÏπòÎêú Í≤ΩÎ°úÎ•º Ïö∞ÏÑ† ÏïàÎÇ¥",
                color = Color(0xFFF3F4F6),
                onClick = { onRouteTypeSelected("CCTV") }
            )

            Spacer(modifier = Modifier.height(12.dp))

            RouteTypeButton(
                icon = "üîî",
                title = "ÎπÑÏÉÅÎ≤® Ïö∞ÏÑ† Í≤ΩÎ°ú",
                description = "ÎπÑÏÉÅÎ≤®Ïù¥ ÏÑ§ÏπòÎêú Íµ¨Í∞ÑÏùÑ Ïö∞ÏÑ† ÏïàÎÇ¥",
                color = Color(0xFFFEF3C7),
                onClick = { onRouteTypeSelected("EMERGENCY_BELL") }
            )

            Spacer(modifier = Modifier.height(12.dp))

            RouteTypeButton(
                icon = "üí°",
                title = "Í∞ÄÎ°úÎì± Ïö∞ÏÑ† Í≤ΩÎ°ú",
                description = "Í∞ÄÎ°úÎì±Ïù¥ Ï∂©Î∂ÑÌïú Î∞ùÏùÄ Í∏∏ÏùÑ Ïö∞ÏÑ† ÏïàÎÇ¥",
                color = Color(0xFFDCFCE7),
                onClick = { onRouteTypeSelected("STREETLAMP") }
            )

            Spacer(modifier = Modifier.height(12.dp))

            RouteTypeButton(
                icon = "üõ°Ô∏è",
                title = "Ï¢ÖÌï© ÏïàÏã¨ Í≤ΩÎ°ú",
                description = "Î™®Îì† ÏïàÏ†ÑÏãúÏÑ§Î¨ºÏùÑ Í≥†Î†§Ìïú ÏµúÏ†ÅÏùò Í≤ΩÎ°ú",
                color = Color(0xFFDDD6FE),
                onClick = { onRouteTypeSelected("COMPREHENSIVE") }
            )

            Spacer(modifier = Modifier.height(16.dp))
        }
    }
}

@Composable
fun RouteTypeButton(
    icon: String,
    title: String,
    description: String,
    color: Color,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .clickable { onClick() },
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(containerColor = color),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = icon,
                fontSize = 24.sp,
                modifier = Modifier.padding(end = 16.dp)
            )

            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = title,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF374151)
                )
                Text(
                    text = description,
                    fontSize = 13.sp,
                    color = Color(0xFF6B7280),
                    modifier = Modifier.padding(top = 4.dp)
                )
            }

            Icon(
                painter = painterResource(id = R.drawable.baseline_navigate_before_24),
                contentDescription = "ÏÑ†ÌÉù",
                tint = Color(0xFF9CA3AF),
                modifier = Modifier.size(20.dp)
            )
        }
    }
}

// Í≤ΩÎ°ú ÏÑ†ÌÉù ÌôîÎ©¥Ïö© ÏßÄÎèÑ ÏÑ§Ï†ï
private fun setupRouteSelectionMap(
    map: KakaoMap, 
    currentLat: Double, 
    currentLng: Double, 
    destination: KakaoPlace
) {
    try {
        val labelManager = map.labelManager ?: return
        
        // ÌòÑÏû¨ ÏúÑÏπò ÎßàÏª§
        val currentPos = LatLng.from(currentLat, currentLng)
        val currentLocationStyles = com.kakao.vectormap.label.LabelStyles.from(
            com.kakao.vectormap.label.LabelStyle.from(android.R.drawable.presence_online)
        )
        val currentLocationOptions = LabelOptions.from(currentPos).setStyles(currentLocationStyles)
        labelManager.layer?.addLabel(currentLocationOptions)
        
        // Î™©Ï†ÅÏßÄ ÎßàÏª§
        val destinationPos = LatLng.from(destination.y.toDouble(), destination.x.toDouble())
        val destinationStyles = com.kakao.vectormap.label.LabelStyles.from(
            com.kakao.vectormap.label.LabelStyle.from(android.R.drawable.ic_notification_overlay)
        )
        val destinationOptions = LabelOptions.from(destinationPos).setStyles(destinationStyles)
        labelManager.layer?.addLabel(destinationOptions)
        
        // Îëê ÏßÄÏ†êÏù¥ Î™®Îëê Î≥¥Ïù¥ÎèÑÎ°ù Ïπ¥Î©îÎùº Ï°∞Ï†ï
        val midLat = (currentLat + destination.y.toDouble()) / 2
        val midLng = (currentLng + destination.x.toDouble()) / 2
        val midPoint = LatLng.from(midLat, midLng)
        
        map.moveCamera(CameraUpdateFactory.newCenterPosition(midPoint, 13))
        
    } catch (e: Exception) {
        android.util.Log.e("RouteTypeSelection", "Error setting up map", e)
    }
}